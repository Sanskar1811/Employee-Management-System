from tkinter import *
from requests import * 
from sqlite3 import *
from tkinter.messagebox import * 
from tkinter.scrolledtext import *
import matplotlib.pyplot as plt


def add() : 
	sw.deiconify()
	mw.withdraw()

def back() : 
	mw.deiconify()
	sw.withdraw()

def view() : 
	tw.deiconify()
	mw.withdraw()
	scr_view.delete(1.0 , END)
	con = None
	try : 
		con = connect("employee.db")
		cursor = con.cursor()
		sql = "select * from emp"
		cursor.execute(sql)
		data = cursor.fetchall()
		info = ""
		for d in data : 
			info +=  " id: " +   str(d[0])   +   " name: " +    str(d[1])  +   " salary: " +  str(d[2]) +  "\n"
		scr_view.insert(INSERT , info)
	except Exception as e :
		con.rollback()
		showerror("Issue" , e) 
	finally : 
		if con is not None :
			con.close()


def vback() : 
	mw.deiconify()
	tw.withdraw()

def update() : 
	fw.deiconify()
	mw.withdraw()

def uback() : 
	mw.deiconify()
	fw.withdraw()

def delete() : 
	nw.deiconify()
	mw.withdraw()

def dback() : 
	mw.deiconify()
	nw.withdraw()

mw = Tk( )
mw.title("E.M.S")
mw.geometry("700x700+400+50")
mw.iconbitmap(mw ,"emp.ico")
mw.configure(bg = "#B4EEB4")
f = ("Calibri" , 30 , "bold")

btn_add = Button(mw , text = "Add" , font = f , width = 10 , command = add)
btn_add.pack(pady = 10)

btn_view = Button(mw , text = "View" , font = f , width = 10 , command = view)
btn_view.pack(pady = 10)

btn_update = Button(mw , text = "Update" , font = f , width = 10 , command = update )
btn_update.pack(pady = 10)

btn_delete = Button(mw , text = "Delete" , font = f , width = 10 , command = delete)
btn_delete.pack(pady = 10)


lab_location = Label(mw , text = "Location :" , font = ("Calibri" , 30), bg = "#B4EEB4")
lab_location.place(x = 15 , y = 600)

lab_loc = Label(mw, text = "" , font = ("Calibri" , 30 , "bold"), bg = "#B4EEB4")
lab_loc.place(x = 190 , y = 600 )
 
wa = "https://ipinfo.io/"
res = get(wa)
data = res.json()
city_name = data["city"]
lab_loc.config(text = city_name)

lab_temp = Label(mw , text = "Temp : " , font = ("Calibri" , 30 )  , bg = "#B4EEB4")
lab_temp.place(x = 460 , y = 600)

lab_temp = Label(mw, text = "" , font = ("Calibri" , 30 , "bold" )  , bg = "#B4EEB4" )
lab_temp.place(x = 590 , y = 600)

a1 = "https://api.openweathermap.org/data/2.5/weather"
a2 = "?q={city_name}"
a3 = "&appid=" + "b0902656ba0952eb5125c1509292ff68"
a4 = "&units=" + "metric"
wa = a1 + a2 + a3 +a4
res = get(wa)
#print(res)
data = res.json()  
#print(data)
	
temp = data["main"] ["temp"]
lab_temp.config(text = temp)



sw = Toplevel(mw)
sw.title("Add Employee")
sw.geometry("700x700+400+50")
sw.iconbitmap(sw,"emp.ico")
sw.configure(bg = "#B9D3EE")

f = ("Calibri" , 30 , "bold")

lab_id = Label(sw , text = "Enter id : " , font = f , bg = "#B9D3EE" )
lab_id.pack(pady = 10)

ent_id = Entry(sw , font = f )
ent_id.pack(pady = 10)


lab_name = Label(sw , text = "Enter name : " , font = f , bg = "#B9D3EE" )
lab_name.pack(pady = 10)

ent_name = Entry(sw , font = f )
ent_name.pack(pady = 10)

lab_salary = Label(sw , text = "Enter salary : " , font = f , bg = "#B9D3EE" )
lab_salary.pack(pady = 10)

ent_salary = Entry(sw , font = f )
ent_salary.pack(pady = 10)

def save() : 
	con = None
	try : 
		con = connect("employee.db")
		cursor = con.cursor()  
		sql = "insert into emp values('%d' , '%s' , '%f')"
		eid = ent_id.get()
		eid = eid.strip()              
		if (eid == "") or (eid.strip()== "" ) : 
			showerror("Failed ","Id should not be empty")
			ent_id.delete(0 , END)
			ent_id.focus()
			return
		try : 
			id = int(eid) 
		except ValueError : 
			showerror("Failed " , "Id must be integer only")
			ent_id.delete(0 , END)
			ent_id.focus()
			return
		if id < 1 : 
			showerror("Failed " ,"Minimum id should be 1")
			ent_id.delete(0 , END)
			ent_id.focus()
			return
		name = ent_name.get()
		if (name == "") or (name.strip() == "") : 
			showerror("Failed " ,"Name should not be empty ")
			ent_name.delete(0 , END)
			ent_name.focus()
			return
		if (not name.isalpha()) :
			showerror("Failed " ,"Invalid name")
			ent_name.delete(0 , END)
			ent_name.focus()
			return
			
		esalary = (ent_salary.get())
		if (esalary == "" ) or (esalary.strip() == "") : 
			showerror("Failed " ,"Salary should not be empty")
			ent_salary.delete(0 , END)
			ent_salary.focus()
			return
		try : 
			salary = float(esalary)
		except : 
			showerror("Failed " ,"Invalid salary")
			ent_salary.delete(0 , END)
			ent_salary.focus()
			return
		cursor.execute(sql%(id,name,salary))
		con.commit()
		showinfo("Success" , "Records saved ")
		ent_id.delete(0 , END)
		ent_name.delete(0, END)
		ent_salary.delete(0 , END)
		ent_id.focus()
		return
		
	except Exception as e :
		con.rollback()
		showerror("Failed ", e)
		ent_id.delete(0 , END)
		ent_name.delete(0, END)
		ent_salary.delete(0 , END)
		ent_id.focus()
		return

	finally : 
		if con is not None :
			con.close()		

btn_save = Button(sw , text = "Save " , font = f , width = 10 , command = save)
btn_save.pack(pady = 10)

btn_back = Button(sw , text = "Back " , font = f , width = 10 , command = back )
btn_back.pack(pady = 10) 
sw.withdraw()


tw = Toplevel(mw)
tw.title("View Employee")
tw.geometry("700x700+400+50")
tw.iconbitmap(tw,"emp.ico")
tw.configure(bg = "#FFE7BA")
f = ("Calibri" , 30 , "bold")

scr_view = ScrolledText(tw , font = f , width = 32 , height = 8 , bg = "#FFE7BA", relief="solid" )
scr_view.pack(pady = 20)

btn_backv = Button(tw , text = "Back" , font = f , width = 10 , command = vback)
btn_backv.place(x = 250 , y = 500 )

tw.withdraw()



fw = Toplevel(mw)
fw.title("Update Employee")
fw.geometry("700x700+400+50")
fw.iconbitmap(fw,"emp.ico")
fw.configure(bg = "#FFEFDB")
f = ("Calibri" , 30 , "bold")

uw_lab_id = Label(fw , text = "Enter id : " , font = f , bg = "#FFEFDB" )
uw_lab_id.pack(pady = 10)

uw_ent_id = Entry(fw , font = f )
uw_ent_id.pack(pady = 10)

uw_lab_name = Label(fw , text = "Enter name : " , font = f  , bg = "#FFEFDB" )
uw_lab_name.pack(pady = 10)

uw_ent_name = Entry(fw , font = f )
uw_ent_name.pack(pady = 10)

uw_lab_salary = Label(fw , text = "Enter salary : ", font = f , bg = "#FFEFDB" )
uw_lab_salary.pack(pady = 10)

uw_ent_salary = Entry(fw , font = f )
uw_ent_salary.pack(pady = 10)

def usave() : 
	con = None
	try  :
		con = connect("employee.db")
		cursor = con.cursor()
		sql = "update emp set name ='%s' , salary='%f' where id = '%d' "
		id = uw_ent_id.get()
		id = id.strip()    
		if (id == "") or (id.strip() == "" ) : 
			showerror("Failed " , "Id should not be empty")
			uw_ent_id.delete(0 , END)
			uw_ent_id.focus()
			return
		try : 
			id = int(id)
		except ValueError : 
			showerror("Failed" , "Id must be integer only")
			uw_ent_id.delete(0 , END)
			uw_ent_id.focus()
			return

		if (id < 1) : 
			showerror("Failed" , "Minimum id should be 1 ")
			uw_ent_id.delete(0 , END)
			uw_ent_id.focus()
			return

		name = uw_ent_name.get()
		if (name == "") or (name.strip() == "") : 
			showerror("Failed" , "Name should not be empty")
			uw_ent_name.delete(0 , END)
			uw_ent_name.focus()
			return

		if (not name.isalpha()) : 
			showerror("Failed" , "Invalid name")
			uw_ent_name.delete(0 , END)
			uw_ent_name.focus()
			return
		
		salary = uw_ent_salary.get()
		if (salary == "") or (salary.strip() == "") : 
			showerror("Failed" , "Salary should not be empty")
			uw_ent_salary.delete(0 , END)
			uw_ent_salary.focus()
			return
		try :
			salary = float(salary)
		except ValueError :
			showerror("Failed" , "Invalid salary" )
			uw_ent_salary.delete(0 , END)
			uw_ent_salary.focus()
			return
		cursor.execute(sql%(name,salary,id))
		if cursor.rowcount == 1 : 
			con.commit()
			showinfo("Success" , "Records updated")
			uw_ent_id.delete(0 , END)
			uw_ent_name.delete(0 , END)
			uw_ent_salary.delete(0 , END)
			uw_ent_id.focus()
			return
		else : 
			showerror("Failed" , "Record does not exists ")
			uw_ent_id.delete(0 , END)
			uw_ent_name.delete(0 , END)
			uw_ent_salary.delete(0 , END)
			uw_ent_id.focus()
			return

	except Exception as e : 
		con.rollback()
		showerror("Issue" , e )
		uw_ent_id.delete(0 , END)
		uw_ent_name.delete(0 , END)
		uw_ent_salary.delete(0 , END)
		uw_ent_id.focus()
		return
	
	finally  :
		if con is not None : 
			con.close()


btn_usave = Button(fw , text = "Save" , font = f , width = 10 , command = usave)
btn_usave.pack(pady = 10)

btn_uback = Button(fw , text = "Back" , font = f , width = 10 , command = uback)
btn_uback.pack(pady = 10)

fw.withdraw()

nw = Toplevel(mw)
nw.title("Delete Employee")
nw.geometry("700x700+400+50")
nw.iconbitmap(nw,"emp.ico")
nw.configure(bg = "#00EEEE")
f = ("Calibri" , 30 , "bold")

dw_lab_id = Label(nw , text = "Enter id : " , font =  f , bg = "#00EEEE")
dw_lab_id.pack(pady = 10)

dw_ent_id = Entry(nw , font = f )
dw_ent_id.pack(pady = 10)

def dsave() : 
	con = None 
	try :
		con = connect("employee.db")
		cursor = con.cursor()
		sql = "delete from emp where id = '%d' "
		id = dw_ent_id.get()
		if (id == "") or (id.strip() == "") : 
			showerror("Failed" , "Id should not be empty") 	
			dw_ent_id.delete(0 , END)
			dw_ent_id.focus()
			return
		try : 
			id = int(id)
		except : 
			showerror("Failed" , "Id must be integer only") 	
			dw_ent_id.delete(0 , END)
			dw_ent_id.focus()
			return
		cursor.execute(sql %(id))
		if cursor.rowcount == 1 :
			con.commit()
			showinfo("Success" , "Record deleted")
			dw_ent_id.delete(0 , END)
			dw_ent_id.focus()
			return
		else :
			showerror("Failed" , "Record does not exists ")
			dw_ent_id.delete(0 , END)
			dw_ent_id.focus()
			return
	except Exception as e :
		con.rollback()
		showerror("Issue" , e)
		dw_ent_id.delete(0 , END)
		dw_ent_id.focus()
		return

	finally : 
		if con is not None :
			con.close()

btn_dsave = Button(nw , text = "Save" , font = f , width = 10 , command = dsave )
btn_dsave.pack(pady = 10)

btn_dback = Button(nw , text = "Back" , font = f , width = 10 , command = dback)
btn_dback.pack(pady = 10)

nw.withdraw()

def chart():
	con = None
	try:
		con = connect("employee.db")
		cursor = con.cursor()
		sql = '''SELECT name, salary FROM emp ORDER BY salary DESC LIMIT 5'''
		cursor.execute(sql)
		data = cursor.fetchall()
		name = []
		salary = []
		for i in data:
			name.append(i[0])
			salary.append(i[1])
		plt.figure(figsize=(8,6))
		c = ['red', 'yellow', 'black', 'blue' , 'orange' ]
		plt.rcParams.update({'text.color': "red", 'axes.labelcolor': "green"})
		ax = plt.axes()
		ax.set_facecolor("lightblue")  # Setting the background color of the plot using facecolor
		
		
		plt.bar(name, salary ,  color= c)
		plt.xlabel("Names of Employee" , fontsize = 15)
		plt.ylabel("Salary of Employee", fontsize = 15)
		plt.title("Top 5 Highest Salaried Employee", fontsize = 15)
		plt.grid()
		plt.show()
	except Exception as e:
        	showerror("issue ", e)
	        con.rollback()
	finally:
		if con is not None:
			con.close()

btn_charts = Button(mw , text = "Charts" , font = f , width = 10 , command = chart )
btn_charts.pack(pady = 10)

def on_closing():
    if askyesno("Quit", "Do you want to quit?"):
        mw.destroy()

mw.protocol("WM_DELETE_WINDOW", on_closing)
sw.protocol("WM_DELETE_WINDOW", on_closing)
tw.protocol("WM_DELETE_WINDOW", on_closing)
fw.protocol("WM_DELETE_WINDOW", on_closing)
nw.protocol("WM_DELETE_WINDOW", on_closing)

mw.mainloop()





